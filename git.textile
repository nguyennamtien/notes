h1. Git

This document is provided under the terms of the Creative Commons Attribution-Share Alike 3.0 United States License, which may be viewed at the following URL:

"http://creativecommons.org/licenses/by-sa/3.0/us/":http://creativecommons.org/licenses/by-sa/3.0/us/

In brief, you may use the contents of this document for any purpose, personal, commercial or otherwise, so long as attribution to the author is maintained. Likewise, the document may be modified, and derivative works and translations made available, so long as such modifications and derivations are offered to the public on equal terms as the original document.

h2. Concept

These terms (in parts taken from [1]) should help understanding the concept behind Git  

- working tree := A *working tree* is any directory on your filesystem which has a repository associated with it (typically indicated by the presence of a sub-directory within it named @.git@.). It includes all the files and sub-directories in that directory.
- repository := A *repository* is a collection of _commits_, each of which is an archive of what the project's working tree looked like at a past date, whether on your machine or someone else's. It also defines _HEAD_ (see below), which identifies the _branch_ or commit the current working tree stemmed from. Lastly, it contains a set of branches and _tags_, to identify certain commits by name.
- the index := Also known as _staging area_ or just _stage_.Git does not commit changes directly from the working tree into the repository. Instead, changes are first registered in something called the index. Think of it as a way of “confirming” your changes, one by one, before doing a commit (which records all your approved changes at once).
- commit := A *commit* is a snapshot of your working tree at some point in time. The state of _HEAD_ (see below) at the time your commit is made becomes that commit’s parent. This is what creates the notion of a "revision history".
- branch := A *branch* is just a name for a commit, also called a reference. It’s the parentage of a commit which defines its history, and thus the typical notion of a “branch of development”.
- tag := A *tag* is also a name for a commit, similar to a branch, except that it always names the same commit, and can have its own description text.
- master :=  The mainline of development in most repositories is done on a branch called *master*. Although this is a typical default, it is in no way special.
- HEAD := *HEAD* is used by your repository to define what is currently checked out. If you checkout a branch, HEAD symbolically refers to that branch, indicating that the branch name should be updated after the next commit operation. If you checkout a specific commit, HEAD refers to that commit only. This is referred to as a _detached_ HEAD, and occurs, for example, if you check out a tag name.

h2. Setup

h3. Installation

bc. $ sudo port install git-core +svn

h3. Configuring Git

bc. $ git config --global color.ui "auto"
$ git config --global user.name "FirstName LastName"	
$ git config --global user.email "your@email.address"

h4. Global ignores 

You don't have to ignore files/paths on a per project basis. You can also have a global ignore list. This is helpful when ignoring such files as @.DS_Store@, which OS X tends to create.

Set the global ignore files

bc. $ git config --global core.excludesfile ~/.gitignore

Now you can add ignores by calling

bc. $ echo .DS_Store >> ~/.gitignore

h4. Configuring for use with git svn

If you still have to work with some svn repositories you might consider setting up a global file for the svn users so that you don't have to do that for each project.

See "Migrate SVN":#migrate-svn for some more information, but run add @--global@ to add it to the global .gitconfig like so:

bc. $ git config --global svn.authorsfile ~/Desktop/users.txt

h2. Basic Git

h3(#new-project). Start a new project with Git

bc.  $ mkdir notes
 $ cd notes
 $ git init
 $ touch README
 $ git add README
 $ git commit -m 'first commit'

h3. Clone existing repository

bc. $ git clone git@github.com:username/project.git

h3. Adding

To track a file or directory

bc. $ git add <path>

To untrack a file

bc. git rm --cached <path>

h4. Undo Adding

You might also call it revert adding a file: 

bc. git reset HEAD filename

h3. Undo changes

h4. Undo all changes in working dir, deleting untracked files

bc. git reset --hard
git clean -f -d

You can also use @git clean -f -x -d@, which also deletes the ignored files

h3. Commit

bc. $ git commit /path/file
$ git commit -m 'message' /path/file
$ git commit -a /path/auto-added.file

h3. Rename

bc. $ git mv <src> <dst>

h3. Diff

bc. $ git diff

h4. Revert

Unlike _SVN_ it is *NOT* @svn revert@ instead use 

bc. $ git checkout filename

to overwrite changes.

h3. Branching

h4. Show Branches

Show the available branches (an asterisk @*@ represents the active branch)

bc. $ git branch 

with options 
* @-r@ show the remote branches
* @-a@ show all branches

h4. Create branches

Make a new branch called "experiment"

bc. $ git branch experiment

h4. Deleting branches

bc. $ git-branch (-d | -D) <branchname>...

* @-d@ Delete a branch. The branch must be fully merged in HEAD.
* @-D@ Delete a branch irrespective of its merged status.

h4. Working with branches

Switch to a branch called "experiment". Git will warn you if you have uncommitted changes.

bc. $ git checkout experiment

h3. Merging

Just change into the branch you want changes to be merged into and type

bc. $ git merge <branch-name-to-be-merged-in> 

If there are conflicts, you can take a llok at alle the versions with

bc. # common base version of the file
$ git show :1:file.txt

bc. # 'our' version of the file
$ git show :2:file.txt

bc. # 'their' version of the file
$git show :3:file.txt

h4. Resolve conflict by using remote version verbatim

bc. $ git show :3:file.txt > file.txt
$ git file.txt

h3. Tagging

Shows a log of the commits (SHA1 id)

bc. $ git log

A log message looks like this:

bc.. commit 589b3ce058b38cc83e54f122200cd250a6a26427
Author: John Doe <john.doe@host.tld>
Date:   Tue Dec 22 01:14:19 2009 +0100

    Commit message 

p. To tag a commit (_lightweight tag_)

bc. $ git tag name-of-tag <sha1-id>

or to tag it with a message (_annotated tag_)

bc. $ git tag -a name-of-tag <sha1-id> -m "message"

View available tags

bc. $ git tag -l

Show all the tags matching pattern "release*"

bc. $ git tag -l release*

Show a tag's messages/signature

bc. git show name-of-tag

To remove a tag

bc. $ git tag -d name-of-tag

To remove a tag on a remote repository, you should do a special push:

bc. $ git push origin :refs/tags/tag_name

To push your tags to a remote repository, use the following command to push all tags:

bc. $ git push origin --tags

h2. Advanced Git

h3(#remove-file-from-history). Remove a file/directory from history

Suppose you want to remove a file (containing confidential information or copyright violation) from all commits:

bc. $ git filter-branch --tree-filter 'rm filename' HEAD

However, if the file is absent from the tree of some commit, a simple @rm@ filename will fail for that tree and commit. Thus you may instead want to use @rm -f@ filename as the script.

Using @--index-filter@ with git-rm yields a significantly faster version. Like with using @rm@ filename, @git rm --cached filename@ will fail if the file is absent from the tree of a commit. If you want to "completely forget" a file, it does not matter when it entered history, so we also add @--ignore-unmatch@

bc. $ git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' merge-point..HEAD

Or if you want to remove a directory from the history you have to call

bc. $ git filter-branch --index-filter 'git rm -rf --cached --ignore-unmatch filename' merge-point..HEAD

The normal use case would be to call the changes to @HEAD@ and not to a range with @merge-point..HEAD@.

While the history is rewritten, the files might still be in your local repository until they have been garbage collected. You might want to "cleanup":#cleanup your repository.

Make sure you get all files and directories. Maybe you have renamed the file or directory in the past.

h3(#cleanup). Cleanup and reclaiming space

bc. $ rm -rf .git/refs/original/
$ git reflog expire --all
$ git gc --aggressive --prune

h3(#backup-repository). Backup your local repository

bc. # --bare creates a bare repository
# forces copying of files instead of hard-linking to it
$ git clone --bare --no-hardlinks /home/proj-a /tmp/proj-a.git

h3. Splitting a subpath into a new repository

First of we clone the project 

bc. $ git clone git://github.com/user/project.git

or make a "local copy":#backup-repository. Finally re-write the history to just contain the files that are in @subdirectory@:

bc.$ cd project
$ git filter-branch --prune-empty --subdirectory-filter name_of_subdirectory master

Then change the remote repository and push the changes.

If you want you can then remove all infos about the subdirectory in your repository (or better on a backup) by "removing the path from history":#remove-file-from-history.

h3. Working with submodules

Most of it is taken from [2].

h4. Pulling submodules

If a project uses submodules and a developer clones that repository it looks like a normal checkout. But a closer look shows that the directories exist but are in fact empty.

Use

bc. $ git submodule init

to add the submodule repository URLs to @.git/config@. Then run

bc. $ git submodule update

to clone the repositories.

If you want to make changes within the submodule you have to check out a branch 

bc. $ cd subproject
$ git checkout master

h4. Making changes in a submodule

You can work quite normally in a checked out submodule. Consider the following example:

bc. $ pwd
/tmp/git/super/subproject
$ cd subproject
$ echo "a" >> file.txt
$ commit -a -m file.txt
[master]: created 92c430: "Added A"
1 files changed, 1 insertions(+), 0 deletions(-)
[/tmp/git/super/subproject(master)]$ cd ..

We are now again in the root directory of our super project. You can checl the status of your submodules via

$ git submodule status
+92c43001654dca53ba570827d8d3e7d465abbae5 ProjectA (heads/master)

As you can see there is a @+@ sign in front of the SHA hash indicating that the HEAD of your submodule has moved away from the version the superproject used to reference to it in its index.

You can check which hash the super project uses via

bc. $ git ls-files --stage | grep subproject
160000 cf8c0db9da2aef3d9da40a733c6e641facfd831a 0	subproject

Running @git status@ will show the subproject directory as modified

bc. $ git status | grep subproject
#	modified:   subproject

h4. Pushing changes of submodule

Always push changes of the submodule before you push the superproject.

bc. git push

h4. Updating the superproject

After (!) you pushed all submodules you have changed (do not do a @git submodule update@ until all submodules have published their changes) you can update your submodule references.

bc. $ pwd
/tmp/git/super
$ git add subproject # DON'T USE THE FORWARD SLASH AT THE END	
$ git commit -m "Updated submodule" subproject
$ git push

BEWARE! If you use @git add subproject/@ instead of @git add subproject@ Git will think you want to delete the submodule and want to add all the files in the submodule directory.

h4. Problems with Submodules

* If you make changes within a submodule and then run @git submodule update@ the changes you made will be silently overwritten.
* Always publish the submodule before you publish the change in the superproject. If you do others won't be able to clone your repository.

h3. Changing author in Git

bc. git filter-branch --commit-filter '
	if [ "$GIT_COMMITTER_NAME" = "<Old Name>" ];
	then
	        GIT_COMMITTER_NAME="<New Name>";
	        GIT_AUTHOR_NAME="<New Name>";
	        GIT_COMMITTER_EMAIL="<New Email>";
	        GIT_AUTHOR_EMAIL="<New Email>";
	        git commit-tree "$@";
	else
	        git commit-tree "$@";
	fi' HEAD

If you want to change

bc. John Doe <jd@host.tld>

into 

bc. Jane Doe <jd@host.tld>

you would call

bc. git filter-branch --commit-filter '
	if [ "$GIT_COMMITTER_NAME" = "John Doe" ];
	then
	        GIT_COMMITTER_NAME="Jane Doe";
	        GIT_AUTHOR_NAME="Jane Doe";
	        GIT_COMMITTER_EMAIL="jd@host.tld";
	        GIT_AUTHOR_EMAIL="jd@host.tld";
	        git commit-tree "$@";
	else
	        git commit-tree "$@";
	fi' HEAD

h2. Github 

h3. Setup

Github needs you to generate a SSH key to communicate with the server. As always the Github team made it easy and posted a "tutorial":http://help.github.com/mac-key-setup/. In short:

bc. $ ssh-keygen -t rsa -C "mail@host.com"

Choose a passphrase, copy it to the clipboard.

bc. $ cat ~/.ssh/id_rsa.pub | pbcopy

Open the _SSH Public Keys_ tab of your "account":https://github.com/account and paste it.

h3. Github User pages

If you publish a repository to github named @username.github.com@, it will automatically be used as your github pages website accessible via "username.github.com":http://username.github.com

It support static HTMl content, but also supports "Jekyll":http://github.com/mojombo/jekyll/, a static site generator. For more info you can read up on it on "pages.github.com":http://pages.github.com/

Be advised that only a push from your local repository does trigger a publish of your homepage, editing the pages via the web interface does not trigger the publishing service.

h3. Push repository to Github

Set up the repository on github using "github.com/repositories/new":http://github.com/repositories/new

Github tells you what to do next, which is "setting up a local repository":#new-project, making your commits, configure your local repository and push it.

bc. $ git remote add origin git@github.com:username/reponame.git
$ git push origin master

h3. Specify GitHub as a remote repository

bc. $ cd ~/path/to/repos/repo
$ vi .git/config

You should see something like

bc. [core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	
We want to add github as a remote repository, so we add

bc. [remote "github"]
	url = git@github.com:git_username/projectname.git
	fetch =  +refs/heads/:refs/remotes/origin/
	push = refs/heads/master:refs/heads/master

The name @github@ can be anything, but it should be helpful if intend to use different remote repositories in the future

Above code can also be added by a command

bc. git remote add github git@github.com:git_username/projectname.git

Do some hacking and commit the changes. To push your changes to github call

bc. $ $ git push github master

Replace @github@ with the name you used.

h3.Submodules

h4(#submodule-private). Adding private repository as submodule

bc. git submodule add git@github.com:username/plugin.git plugins/plugin

h2. Use cases

h3. Creating a mirror of SVN repository on Github

I wanted to mirror the "Lejos":http://lejos.sourceforge.net/ project on github, because working with SVN starts to feel weird.

Taken from "http://www.icoretech.org/2009/08/how-to-mirror-a-svn-repository-on-github/":http://www.icoretech.org/2009/08/how-to-mirror-a-svn-repository-on-github/

First you have to create the project on GitHub. Then

bc. cd path/to/projects
mkdir lejos
cd lejos
git init

Now setup the SVN repository as a remote source to track.
It should be noted that the '-T' switch points git directly to the trunk, which is fine for our purposes.

bc. git svn init -T ttps://lejos.svn.sourceforge.net/svnroot/lejos

Perform the initial pull.

bc. git svn fetch

This will take some time, based on the size of the remote repository.

After the first pull is finished, go ahead and run the garbage collector, this will help to speed up things and reduce size.

bc. git gc

The "original blog entry":http://www.icoretech.org/2009/08/how-to-mirror-a-svn-repository-on-github/ explains on how to setup automatic syncing via cronjob and an additional ssh key without passphrase. For my usecase that is not needed, I sync manually.

To keep stuff in sync we need to do

bc. git svn rebase
git push origin master

h3(#migrate-svn). Migrate subversion repositories

Create an empty directory and prepare the repository

bc. $ mkdir project_tmp
$ cd project_tmp
$ git svn init http://code.yoursite.net/project/trunk/ --no-metadata

You get an answer like

bc. Initialized empty Git repository in /absolute/path/project_tmp/.git/

Now create a file with a list of your svn users and map them to git users, 
save it to @~/username/users.txt@. The file contents have to look similar
to this:

bc. joesample = Joe Sample <joe.sample@domain.net>
janedoe = Jane Doe <jane.doe@company.com>

then run

bc. $ git config svn.authorsfile /path/to/svn.authorsfile

Now we have to get the data from the svn repository by calling

bc. $ git svn fetch

Depending on the size of your repository and the number of changes you made the process made take while. If everything went fine you get a bunch of messages that look something like this:

bc. [...]
r126 = 5ee70c02797f9f4d31238fcdbbcaaf830daf490d (refs/remotes/git-svn)
	M	doc/notes.textile
	D	src/com/project/keywords.properties
	A	src/com/project/Entry.java
r127 = 4b38f4b2a740e8afc8a134f4d5425dbb2e42dc40 (refs/remotes/git-svn)
Checked out HEAD:
http://code.yoursite.net/project/trunk/ r127

You can use @git log@ to check if the users were setup correctly. The last step is too to another clone of the repository to get rid of all the stuff that is/was only needed for git svn to work.

bc. $ cd ..
$ git clone project_tmp project

h2. FAQ - Problems/Error Messages

h3. Git behind a proxy

Taken from "emilsit.net":http://www.emilsit.net/blog/archives/how-to-use-the-git-protocol-through-a-http-connect-proxy/

bq. Fortunately, most corporate firewalls allow for tunneling connections through their HTTP proxies, using HTTP CONNECT. This is normally used for allowing browser to connect to secure websites (using SSL over port 443), but if you are lucky, you can have your firewall administrator configure the proxy to also allow CONNECT for port 9418, which is the port used by git.

Install @socat@

bc. $ sudo port install socat
	
Create a script called @gitproxy@ somewhere in your path

bc.. #!/bin/sh
# Use socat to proxy git through an HTTP CONNECT firewall.
# Useful if you are trying to clone git:// from inside a company.
# Requires that the proxy allows CONNECT to port 9418.
#
# Save this file as gitproxy somewhere in your path (e.g., ~/bin) and then run
#   chmod +x gitproxy
#   git config --global core.gitproxy gitproxy
#
# More details at http://tinyurl.com/8xvpny
 
# Configuration. Common proxy ports are 3128, 8123, 8000.
_proxy=proxy.yourcompany.com
_proxyport=3128
 
exec socat STDIO PROXY:$_proxy:$1:$2,proxyport=$_proxyport	

p. Configure git to use it:

bc. $ git config --global core.gitproxy gitproxy
	
h3. @error: src refspec master does not match any.@

The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (@git push origin my-local-master:master@ which will rename it to master on github) or make a commit first. You can not push a completely empty repository.

h3. Your branch is ahead of 'origin/master' by xx commits.

Recently a repository of mine gave me

bc. # On branch master
# Your branch is ahead of 'origin/master' by xx commits.

When calling 

bc. $ git status

As its a local repository, only I work on It kinda baffled my as to why this message occurs. As expected @.git/config@ shows

bc. 	[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	url = /Users/some/path

My guess is that I accidentally called @git push origin master@. In my case I can safely delete the remote branch

bc. $ git remote rm origin

Another case might be:
When I did a @git push github master@ Git reported that @Everything up-to-date@, which I found weird. Of course the problem was easy to solve and easy to spot. I forgot to remove @origin@ as remote source when I added @github@ as my default remote. Also both pointed to the same repository origin/master was reporting the "problem". Git obviously stores infos about the stat of remotes.

An easy 

bc. git remote rm origin

solved the problem for me, as I don't need two copies of the same remote.

h3. error: failed to push some refs to 'git@github.com:usernname/project.git

I tried pushing changes to github and got

bc. $ git push github master
To git@github.com:username/project.git
 ! [rejected]        master -> master (non-fast forward)
error: failed to push some refs to 'git@github.com:username/project.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes before pushing again.  See the 'non-fast forward'
section of 'git push --help' for details.

Very confusing error message. All it means (at least in my case) that you have to pull changes made to the remote repository.

bc. $ git pull github master
From github.com:username/project
 * branch            master     -> FETCH_HEAD
Merge made by recursive.
 file.textile |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

h2. Sources

fn1. "Git from the bottom up":http://ftp.newartisans.com/pub/git.from.bottom.up.pdf (John Wiegley, 09-12-02)

fn2. "GitSubmoduleTutorial":http://git.wiki.kernel.org/index.php/GitSubmoduleTutorial