h1. Git

h2. Installation on OS X

<pre>
	$sudo port install git-core +svn
</pre>

h2. Configuring Git

<pre>
	$ git config --global color.ui "auto"
	$ git config --global user.name "FirstName LastName"	
	$ git config --global user.email "your@email.address"
</pre>

h3. Global ignores 

You don't have to ignore files/paths on a per project basis. You can also have a global ignore list. This is helpful when ignoring such files as @.DS_Store@, which OS X tends to create.

Set the global ignore files

<pre>
	$ git config --global core.excludesfile ~/.gitignore
</pre>

Now you can add ignores by calling

<pre>
	$ echo .DS_Store >> ~/.gitignore
</pre>

h2(#migrate-svn). Migrate subversion repositories

Create an empty directory and prepare the repository

<pre>
	$ mkdir project_tmp
	$ cd project_tmp
	$ git svn init http://code.yoursite.net/project/trunk/ --no-metadata
</pre>

You get an answer like

<pre>
	Initialized empty Git repository in /absolute/path/project_tmp/.git/
</pre>		

Now create a file with a list of your svn users and map them to git users, 
save it to @~/username/users.txt@. The file contents have to look similar
to this:

<pre>
	joesample = Joe Sample <joe.sample@domain.net>
	janedoe = Jane Doe <jane.doe@company.com>
</pre>

then run

<pre>
	$ git config svn.authorsfile /path/to/svn.authorsfile
</pre>


Now we have to get the data from the svn repository by calling

<pre>
	$ git svn fetch
</pre>

Depending on the size of your repository and the number of changes you made the process made take while. If everything went fine you get a bunch of messages that look something like this:
<pre>
	[...]
	r126 = 5ee70c02797f9f4d31238fcdbbcaaf830daf490d (refs/remotes/git-svn)
		M	doc/notes.textile
		D	src/com/project/keywords.properties
		A	src/com/project/Entry.java
	r127 = 4b38f4b2a740e8afc8a134f4d5425dbb2e42dc40 (refs/remotes/git-svn)
	Checked out HEAD:
	  http://code.yoursite.net/project/trunk/ r127
</pre>

You can use @git log@ to check if the users were setup correctly. The last step is too to another clone of the repository to get rid of all the stuff that is/was only needed for git svn to work.

<pre>
	$ cd ..
	$ git clone project_tmp project
</pre>


h2. Configuring for use with git svn

If you still have to work with some svn repositories you might consider setting up a global file for the svn users so that you don't have to do that for each project.

See "Migrate SVN":#migrate-svn for some more information, but run add @--global@ to add it to the global .gitconfig like so:

<pre>
	$ git config --global svn.authorsfile ~/Desktop/users.txt
</pre>

h2(#create-local-repo). Setting up local Git

<pre>
  $ mkdir notes
  $ cd notes
  $ git init
  $ touch README
  $ git add README
  $ git commit -m 'first commit'
</pre>

h2. Github 

h3. Setup

Github needs you to generate a SSH key to communicate with the server. As always the Github team made it easy and posted a "tutorial":http://help.github.com/mac-key-setup/. In short:

<pre>
	$ ssh-keygen -t rsa -C "mail@host.com"
</pre>	 

Choose a passphrase, copy it to the clipboard.

<pre>
	$ cat ~/.ssh/id_rsa.pub | pbcopy
</pre>

Open the _SSH Public Keys_ tab of your "account":https://github.com/account and paste it.

h3. Push repository to Github

Set up the repository on github using "github.com/repositories/new":http://github.com/repositories/new

Github tells you what to do next, which is "setting up a local repository":#create-local-repo, making your commits, configure your local repository and push it.

<pre>	
	$ git remote add origin git@github.com:username/reponame.git
	$ git push origin master
</pre>

h2. Setting up remote Git

http://toolmantim.com/articles/setting_up_a_new_remote_git_repository

h2. Using Git

http://www.kernel.org/pub/software/scm/git/docs/everyday.html#Individual%20Developer%20%28Standalone%29
http://git.or.cz/course/svn.html
http://www.gitready.com/

h3. Commit

@git commit path@

h3. Revert

Unlike _SVN_ it is *NOT* @svn revert@ instead use 

<pre>
	$ git checkout filename
</pre>

to overwrite changes.

h2. Advanced Git

h3. Remove a file from history

Suppose you want to remove a file (containing confidential information or copyright violation) from all commits:

bc. $ git filter-branch --tree-filter 'rm filename' HEAD

However, if the file is absent from the tree of some commit, a simple @rm@ filename will fail for that tree and commit. Thus you may instead want to use @rm -f@ filename as the script.

Using @--index-filter@ with git-rm yields a significantly faster version. Like with using @rm@ filename, @git rm --cached filename@ will fail if the file is absent from the tree of a commit. If you want to "completely forget" a file, it does not matter when it entered history, so we also add @--ignore-unmatch@

bc. $ git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' merge-point..HEAD

h2. FAQ - Problems/Error Messages

h3. @error: src refspec master does not match any.@

The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.