h1. Software Development 

h2. Data Structures

h3. Graphs

* _undirected_ graph
* _directed_ graph

For both forms there are variants allowing multiple edges, also called _multigraph_, permitting multiple edges between two nodes. A graph can also _weighted_ or unweighted. That means that each edge has been assigned a weight normally a number between zero and one.

A graph is a collection of nodes and edges.

h4. Vertex

A *vertex* or node is the fundamental unit of each graph. Nodes are (normally) connected with edges. These edges can have a direction or a weight. The _degree_ of a node describes how many edges are connected to a node. An _isolated node_ has no edges. A _leaf node_ is a node with just one edge. If the graph is directed, you distinguish between an _indegree_ for incoming edges and _outdegree_ for outgoing edges.

h2. Modularity and Testability

h3. Dependency Injection

_Dependency Injection_ [1] or _DI_ in short is the process of defining dependencies of external objects.

Three types of DI:

* _Type 1_ or _Interface Injection_: an interface is added to the class
* _Type 2_ or _Setter Injection_: _Setter_-methods to inject a dependency
* _Type 3_ or _Constructor Injection_ the constructor of the module contains the dependencies

h2. API/Framework Design

h3. Fluent Interfaces

Fluent interfaces [2] only make sense if a developer uses them but not if he has to write classes, but not if he has not write classes fulfilling the contract.

h2. Web Services

A _web service_ creates a communication channel across to machines.

h3. REST

h4. HTTP

The foundation of the web is the HTTP protocoll ("RFC 2616":http://www.ietf.org/rfc/rfc2616.txt covers HTTP 1.1). The protocol is part of the application layer (layer 5-7 according to the iso model). Key figures defining the protocol were Roy Fielding and Time Berners Lee.

In short HTTP bringes pages from the servers to your browser. With it you can uniquely identify resources worldwide. A web page is just a representation of such a resource. The URL tell the browser, that there is a concept for this particular resource. A browser can than ask for a representation of this concept. HTML is one type of a representation. A _web service_ is just another one. 

URLs are a key component of the language of a machine. There are much like a noun. To use these nouns we need verbs: POST, GET, PUT, DELETE. These verbs sufice to describe a CRUD system. You just need to agree on what information is being exchanged.

h2. Sources

fn1. "Inversion of Control":http://martinfowler.com/articles/injection.html#InversionOfControl (Martin Fowler, 04-01-23)

fn2. "FluentInterface":http://martinfowler.com/bliki/FluentInterface.html (Martin Fowler, 05-12-20)