h1. HTTP

The foundation of the web is the HTTP protocoll ("RFC 2616":http://www.ietf.org/rfc/rfc2616.txt covers HTTP 1.1). The protocol is part of the application layer (layer 5-7 according to the iso model). Key figures defining the protocol were "Roy Fielding":http://www.ics.uci.edu/~fielding/ and Tim Berners Lee.

In short HTTP bringes pages from the servers to your browser. With it you can uniquely identify resources worldwide. A web page is just a representation of such a resource. The URL tell the browser, that there is a concept for this particular resource. A browser can than ask for a representation of this concept. HTML is one type of a representation. A _web service_ is just another one. 

URLs are a key component of the language of a machine. There are much like a noun. To use these nouns we need verbs: POST, GET, PUT, DELETE. These verbs sufice to describe a CRUD system. You just need to agree on what information is being exchanged.

h2. REST

Is an abstract architecture style defined by "Roy Fielding":http://www.ics.uci.edu/~fielding/ defined in his dissertation "Architectural Styles and the Design of Network-based Software Architectures":http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm.

RESTful HTTP is an application of the web standards in particular HTTP aligned with the REST architecural style.

5 key ideas:
* each conecpt gets its own ID, a URI
* standard methods to interact with resources (@GET@, @PUT@, @POST@, @DELETE@)
* you can link to other resources (with the URI)
* each resource can have different representations
* stateless communication to have entry points in the application

@GET@ is a safe operation, meaning that it a read only operation, easily cachable, easily scalable

RESTful HTTP is when I don't (want to) know much about the infrastructure of the communication partner. It't not a good choice when you develop performance critical systems and you use strongly coupled systems.

h3. REST vs WS-* 

REST precedes the WS-* standards. Most of the communication today is based on HTTP. Web services are independent from the underlying communication protocols. They can't make use of the advantages of a particular protocol.

h2. cURL

A good ressource for testing HTTP with CURL can be found "here":http://curl.haxx.se/docs/httpscripting.html

h3. POST a file

Given this form

bc. <form method="POST" enctype='multipart/form-data' action="upload.cgi">
	<input type=file name=upload>
	<input type=submit name=press value="OK">
</form>

you can POST it with

bc. curl -F upload=@localfilename -F press=OK [URL]